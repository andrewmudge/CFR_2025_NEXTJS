{
  "c:\\Users\\mudge\\apps\\cfr_2025_nextjs\\serverless-lambda.yml": {
    "versionFramework": "4.17.1",
    "servicePath": "c:\\Users\\mudge\\apps\\cfr_2025_nextjs\\serverless-lambda.yml",
    "serviceConfigFileName": "serverless-lambda.yml",
    "service": {
      "service": "cfr-photo-lambdas",
      "provider": {
        "name": "aws",
        "runtime": "nodejs20.x",
        "region": "us-east-1",
        "stage": "dev",
        "environment": {
          "S3_BUCKET_NAME": "cfr-photos-dev"
        },
        "iamRoleStatements": [
          {
            "Effect": "Allow",
            "Action": [
              "s3:GetObject",
              "s3:PutObject",
              "s3:ListBucket",
              "s3:HeadObject"
            ],
            "Resource": [
              "arn:aws:s3:::cfr-photos-dev",
              "arn:aws:s3:::cfr-photos-dev/*"
            ]
          }
        ],
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "UploadPhotoLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/cfr-photo-lambdas-dev-uploadPhoto"
              }
            },
            "ListPhotosLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/cfr-photo-lambdas-dev-listPhotos"
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "cfr-photo-lambdas",
                          "dev",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/cfr-photo-lambdas-dev*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/cfr-photo-lambdas-dev*:*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "s3:GetObject",
                            "s3:PutObject",
                            "s3:ListBucket",
                            "s3:HeadObject"
                          ],
                          "Resource": [
                            "arn:aws:s3:::cfr-photos-dev",
                            "arn:aws:s3:::cfr-photos-dev/*"
                          ]
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "cfr-photo-lambdas",
                      "dev",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
            },
            "UploadPhotoLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-e3c07911-961a",
                  "S3Key": "serverless/cfr-photo-lambdas/dev/1751455594284-2025-07-02T11:26:34.284Z/uploadPhoto.zip"
                },
                "Handler": "serverless-functions/upload-photo.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "cfr-photo-lambdas-dev-uploadPhoto",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "S3_BUCKET_NAME": "cfr-photos-dev"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "UploadPhotoLogGroup"
              ]
            },
            "ListPhotosLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-e3c07911-961a",
                  "S3Key": "serverless/cfr-photo-lambdas/dev/1751455594284-2025-07-02T11:26:34.284Z/listPhotos.zip"
                },
                "Handler": "serverless-functions/list-photos.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "cfr-photo-lambdas-dev-listPhotos",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "S3_BUCKET_NAME": "cfr-photos-dev"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "ListPhotosLogGroup"
              ]
            },
            "UploadPhotoLambdaVersionHYoEsswTip0kOIHXLOFX5PqvDfdRWRorT9xta0HC0": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "UploadPhotoLambdaFunction"
                },
                "CodeSha256": "F/gW6qo0Zg0taaawD3TkGQoGEdM8U9hVXyOjQ+ZL9+U="
              }
            },
            "ListPhotosLambdaVersionP4wjdpEHzfPVsZSOEs0QotlK4qnKtldzpwOCF4Srlcg": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "ListPhotosLambdaFunction"
                },
                "CodeSha256": "F/gW6qo0Zg0taaawD3TkGQoGEdM8U9hVXyOjQ+ZL9+U="
              }
            },
            "ApiGatewayRestApi": {
              "Type": "AWS::ApiGateway::RestApi",
              "Properties": {
                "Name": "dev-cfr-photo-lambdas",
                "EndpointConfiguration": {
                  "Types": [
                    "EDGE"
                  ]
                },
                "Policy": ""
              }
            },
            "ApiGatewayResourceUpload": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "upload",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourcePhotos": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "photos",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodUploadOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUpload"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodPhotosOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourcePhotos"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodUploadPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUpload"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "UploadPhotoLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "UploadPhotoLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodPhotosGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourcePhotos"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "ListPhotosLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "ListPhotosLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayDeployment1751455560713": {
              "Type": "AWS::ApiGateway::Deployment",
              "Properties": {
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "StageName": "dev"
              },
              "DependsOn": [
                "ApiGatewayMethodUploadOptions",
                "ApiGatewayMethodPhotosOptions",
                "ApiGatewayMethodUploadPost",
                "ApiGatewayMethodPhotosGet"
              ]
            },
            "UploadPhotoLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "UploadPhotoLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "ListPhotosLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "ListPhotosLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "PhotosBucket": {
              "Type": "AWS::S3::Bucket",
              "Properties": {
                "BucketName": "cfr-photos-dev",
                "PublicAccessBlockConfiguration": {
                  "BlockPublicAcls": false,
                  "BlockPublicPolicy": false,
                  "IgnorePublicAcls": false,
                  "RestrictPublicBuckets": false
                },
                "CorsConfiguration": {
                  "CorsRules": [
                    {
                      "AllowedHeaders": [
                        "*"
                      ],
                      "AllowedMethods": [
                        "GET",
                        "PUT",
                        "POST"
                      ],
                      "AllowedOrigins": [
                        "*"
                      ]
                    }
                  ]
                }
              }
            },
            "PhotosBucketPolicy": {
              "Type": "AWS::S3::BucketPolicy",
              "Properties": {
                "Bucket": {
                  "Ref": "PhotosBucket"
                },
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": "*",
                      "Action": "s3:GetObject",
                      "Resource": {
                        "Fn::Join": [
                          "",
                          [
                            {
                              "Fn::GetAtt": [
                                "PhotosBucket",
                                "Arn"
                              ]
                            },
                            "/*"
                          ]
                        ]
                      }
                    }
                  ]
                }
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": "serverless-framework-deployments-us-east-1-e3c07911-961a",
              "Export": {
                "Name": "sls-cfr-photo-lambdas-dev-ServerlessDeploymentBucketName"
              }
            },
            "UploadPhotoLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "UploadPhotoLambdaVersionHYoEsswTip0kOIHXLOFX5PqvDfdRWRorT9xta0HC0"
              },
              "Export": {
                "Name": "sls-cfr-photo-lambdas-dev-UploadPhotoLambdaFunctionQualifiedArn"
              }
            },
            "ListPhotosLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "ListPhotosLambdaVersionP4wjdpEHzfPVsZSOEs0QotlK4qnKtldzpwOCF4Srlcg"
              },
              "Export": {
                "Name": "sls-cfr-photo-lambdas-dev-ListPhotosLambdaFunctionQualifiedArn"
              }
            },
            "ServiceEndpoint": {
              "Description": "URL of the service endpoint",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    },
                    "/dev"
                  ]
                ]
              },
              "Export": {
                "Name": "sls-cfr-photo-lambdas-dev-ServiceEndpoint"
              }
            }
          }
        },
        "vpc": {}
      },
      "functions": {
        "uploadPhoto": {
          "handler": "serverless-functions/upload-photo.handler",
          "events": [
            {
              "http": {
                "path": "upload",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "cfr-photo-lambdas-dev-uploadPhoto",
          "package": {
            "artifact": ".serverless\\uploadPhoto.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "UploadPhotoLambdaVersionHYoEsswTip0kOIHXLOFX5PqvDfdRWRorT9xta0HC0"
        },
        "listPhotos": {
          "handler": "serverless-functions/list-photos.handler",
          "events": [
            {
              "http": {
                "path": "photos",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "cfr-photo-lambdas-dev-listPhotos",
          "package": {
            "artifact": ".serverless\\listPhotos.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "ListPhotosLambdaVersionP4wjdpEHzfPVsZSOEs0QotlK4qnKtldzpwOCF4Srlcg"
        }
      },
      "resources": {
        "Resources": {
          "PhotosBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketName": "cfr-photos-dev",
              "PublicAccessBlockConfiguration": {
                "BlockPublicAcls": false,
                "BlockPublicPolicy": false,
                "IgnorePublicAcls": false,
                "RestrictPublicBuckets": false
              },
              "CorsConfiguration": {
                "CorsRules": [
                  {
                    "AllowedHeaders": [
                      "*"
                    ],
                    "AllowedMethods": [
                      "GET",
                      "PUT",
                      "POST"
                    ],
                    "AllowedOrigins": [
                      "*"
                    ]
                  }
                ]
              }
            }
          },
          "PhotosBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "PhotosBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": "*",
                    "Action": "s3:GetObject",
                    "Resource": {
                      "Fn::Join": [
                        "",
                        [
                          {
                            "Fn::GetAtt": [
                              "PhotosBucket",
                              "Arn"
                            ]
                          },
                          "/*"
                        ]
                      ]
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {}
      },
      "package": {
        "individually": true,
        "exclude": [
          ".next/**",
          "node_modules/**",
          "components/**",
          "app/**",
          "lib/**",
          "public/**",
          ".git/**",
          "*.md",
          "*.json",
          "*.lock"
        ],
        "include": [
          "serverless-functions/**"
        ],
        "artifactsS3KeyDirname": "serverless/cfr-photo-lambdas/dev/code-artifacts",
        "deploymentBucket": "serverless-framework-deployments-us-east-1-e3c07911-961a",
        "artifactDirectoryName": "serverless/cfr-photo-lambdas/dev/1751455594284-2025-07-02T11:26:34.284Z"
      }
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs20.x",
      "region": "us-east-1",
      "stage": "dev",
      "environment": {
        "S3_BUCKET_NAME": "cfr-photos-dev"
      },
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject",
            "s3:PutObject",
            "s3:ListBucket",
            "s3:HeadObject"
          ],
          "Resource": [
            "arn:aws:s3:::cfr-photos-dev",
            "arn:aws:s3:::cfr-photos-dev/*"
          ]
        }
      ],
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "UploadPhotoLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/cfr-photo-lambdas-dev-uploadPhoto"
            }
          },
          "ListPhotosLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/cfr-photo-lambdas-dev-listPhotos"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "cfr-photo-lambdas",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/cfr-photo-lambdas-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/cfr-photo-lambdas-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "s3:GetObject",
                          "s3:PutObject",
                          "s3:ListBucket",
                          "s3:HeadObject"
                        ],
                        "Resource": [
                          "arn:aws:s3:::cfr-photos-dev",
                          "arn:aws:s3:::cfr-photos-dev/*"
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "cfr-photo-lambdas",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "UploadPhotoLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-e3c07911-961a",
                "S3Key": "serverless/cfr-photo-lambdas/dev/1751455594284-2025-07-02T11:26:34.284Z/uploadPhoto.zip"
              },
              "Handler": "serverless-functions/upload-photo.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "cfr-photo-lambdas-dev-uploadPhoto",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "S3_BUCKET_NAME": "cfr-photos-dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UploadPhotoLogGroup"
            ]
          },
          "ListPhotosLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-e3c07911-961a",
                "S3Key": "serverless/cfr-photo-lambdas/dev/1751455594284-2025-07-02T11:26:34.284Z/listPhotos.zip"
              },
              "Handler": "serverless-functions/list-photos.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "cfr-photo-lambdas-dev-listPhotos",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "S3_BUCKET_NAME": "cfr-photos-dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ListPhotosLogGroup"
            ]
          },
          "UploadPhotoLambdaVersionHYoEsswTip0kOIHXLOFX5PqvDfdRWRorT9xta0HC0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UploadPhotoLambdaFunction"
              },
              "CodeSha256": "F/gW6qo0Zg0taaawD3TkGQoGEdM8U9hVXyOjQ+ZL9+U="
            }
          },
          "ListPhotosLambdaVersionP4wjdpEHzfPVsZSOEs0QotlK4qnKtldzpwOCF4Srlcg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ListPhotosLambdaFunction"
              },
              "CodeSha256": "F/gW6qo0Zg0taaawD3TkGQoGEdM8U9hVXyOjQ+ZL9+U="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-cfr-photo-lambdas",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceUpload": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "upload",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourcePhotos": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "photos",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUploadOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUpload"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodPhotosOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourcePhotos"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUploadPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUpload"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UploadPhotoLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "UploadPhotoLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodPhotosGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourcePhotos"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ListPhotosLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ListPhotosLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1751455560713": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodUploadOptions",
              "ApiGatewayMethodPhotosOptions",
              "ApiGatewayMethodUploadPost",
              "ApiGatewayMethodPhotosGet"
            ]
          },
          "UploadPhotoLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UploadPhotoLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ListPhotosLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ListPhotosLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "PhotosBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketName": "cfr-photos-dev",
              "PublicAccessBlockConfiguration": {
                "BlockPublicAcls": false,
                "BlockPublicPolicy": false,
                "IgnorePublicAcls": false,
                "RestrictPublicBuckets": false
              },
              "CorsConfiguration": {
                "CorsRules": [
                  {
                    "AllowedHeaders": [
                      "*"
                    ],
                    "AllowedMethods": [
                      "GET",
                      "PUT",
                      "POST"
                    ],
                    "AllowedOrigins": [
                      "*"
                    ]
                  }
                ]
              }
            }
          },
          "PhotosBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "PhotosBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": "*",
                    "Action": "s3:GetObject",
                    "Resource": {
                      "Fn::Join": [
                        "",
                        [
                          {
                            "Fn::GetAtt": [
                              "PhotosBucket",
                              "Arn"
                            ]
                          },
                          "/*"
                        ]
                      ]
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "serverless-framework-deployments-us-east-1-e3c07911-961a",
            "Export": {
              "Name": "sls-cfr-photo-lambdas-dev-ServerlessDeploymentBucketName"
            }
          },
          "UploadPhotoLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UploadPhotoLambdaVersionHYoEsswTip0kOIHXLOFX5PqvDfdRWRorT9xta0HC0"
            },
            "Export": {
              "Name": "sls-cfr-photo-lambdas-dev-UploadPhotoLambdaFunctionQualifiedArn"
            }
          },
          "ListPhotosLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ListPhotosLambdaVersionP4wjdpEHzfPVsZSOEs0QotlK4qnKtldzpwOCF4Srlcg"
            },
            "Export": {
              "Name": "sls-cfr-photo-lambdas-dev-ListPhotosLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-cfr-photo-lambdas-dev-ServiceEndpoint"
            }
          }
        }
      },
      "vpc": {}
    },
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "serviceRawFile": "service: cfr-photo-lambdas\n\nprovider:\n  name: aws\n  runtime: nodejs20.x\n  region: us-east-1\n  stage: ${opt:stage, 'dev'}\n  environment:\n    S3_BUCKET_NAME: cfr-photos-${self:provider.stage}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:GetObject\n        - s3:PutObject\n        - s3:ListBucket\n        - s3:HeadObject\n      Resource:\n        - arn:aws:s3:::${self:provider.environment.S3_BUCKET_NAME}\n        - arn:aws:s3:::${self:provider.environment.S3_BUCKET_NAME}/*\n\nfunctions:\n  uploadPhoto:\n    handler: serverless-functions/upload-photo.handler\n    events:\n      - http:\n          path: /upload\n          method: POST\n          cors: true\n  \n  listPhotos:\n    handler: serverless-functions/list-photos.handler\n    events:\n      - http:\n          path: /photos\n          method: GET\n          cors: true\n\nresources:\n  Resources:\n    PhotosBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:provider.environment.S3_BUCKET_NAME}\n        PublicAccessBlockConfiguration:\n          BlockPublicAcls: false\n          BlockPublicPolicy: false\n          IgnorePublicAcls: false\n          RestrictPublicBuckets: false\n        CorsConfiguration:\n          CorsRules:\n            - AllowedHeaders: ['*']\n              AllowedMethods: [GET, PUT, POST]\n              AllowedOrigins: ['*']\n    \n    PhotosBucketPolicy:\n      Type: AWS::S3::BucketPolicy\n      Properties:\n        Bucket: !Ref PhotosBucket\n        PolicyDocument:\n          Statement:\n            - Effect: Allow\n              Principal: '*'\n              Action: s3:GetObject\n              Resource: !Join ['', [!GetAtt PhotosBucket.Arn, '/*']]\n\npackage:\n  individually: true\n  exclude:\n    - .next/**\n    - node_modules/**\n    - components/**\n    - app/**\n    - lib/**\n    - public/**\n    - .git/**\n    - '*.md'\n    - '*.json'\n    - '*.lock'\n  include:\n    - serverless-functions/**",
    "command": [
      "deploy"
    ],
    "options": {
      "config": "serverless-lambda.yml"
    },
    "orgId": "2998032c-fd9e-4349-b28c-c795449e18b9",
    "orgName": "bofasprojects",
    "userId": "25Vvn7rTLw7G2sfTG2",
    "userName": "bofasprojects",
    "serviceProviderAwsAccountId": "122610511543",
    "serviceProviderAwsCfStackName": "cfr-photo-lambdas-dev",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:us-east-1:122610511543:stack/cfr-photo-lambdas-dev/74e30c20-5737-11f0-94e3-126bf9629d53",
    "serviceProviderAwsCfStackCreated": "2025-07-02T11:26:54.538Z",
    "serviceProviderAwsCfStackUpdated": null,
    "serviceProviderAwsCfStackStatus": "CREATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "ListPhotosLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:122610511543:function:cfr-photo-lambdas-dev-listPhotos:2",
        "Description": "Current Lambda function version",
        "ExportName": "sls-cfr-photo-lambdas-dev-ListPhotosLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "UploadPhotoLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:122610511543:function:cfr-photo-lambdas-dev-uploadPhoto:2",
        "Description": "Current Lambda function version",
        "ExportName": "sls-cfr-photo-lambdas-dev-UploadPhotoLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServiceEndpoint",
        "OutputValue": "https://4358gamx8h.execute-api.us-east-1.amazonaws.com/dev",
        "Description": "URL of the service endpoint",
        "ExportName": "sls-cfr-photo-lambdas-dev-ServiceEndpoint"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "serverless-framework-deployments-us-east-1-e3c07911-961a",
        "ExportName": "sls-cfr-photo-lambdas-dev-ServerlessDeploymentBucketName"
      }
    ],
    "compiledCloudFormationTemplate": {
      "AWSTemplateFormatVersion": "2010-09-09",
      "Description": "The AWS CloudFormation template for this Serverless application",
      "Resources": {
        "UploadPhotoLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/cfr-photo-lambdas-dev-uploadPhoto"
          }
        },
        "ListPhotosLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/cfr-photo-lambdas-dev-listPhotos"
          }
        },
        "IamRoleLambdaExecution": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "lambda.amazonaws.com"
                    ]
                  },
                  "Action": [
                    "sts:AssumeRole"
                  ]
                }
              ]
            },
            "Policies": [
              {
                "PolicyName": {
                  "Fn::Join": [
                    "-",
                    [
                      "cfr-photo-lambdas",
                      "dev",
                      "lambda"
                    ]
                  ]
                },
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:CreateLogStream",
                        "logs:CreateLogGroup",
                        "logs:TagResource"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/cfr-photo-lambdas-dev*:*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:PutLogEvents"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/cfr-photo-lambdas-dev*:*:*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "s3:GetObject",
                        "s3:PutObject",
                        "s3:ListBucket",
                        "s3:HeadObject"
                      ],
                      "Resource": [
                        "arn:aws:s3:::cfr-photos-dev",
                        "arn:aws:s3:::cfr-photos-dev/*"
                      ]
                    }
                  ]
                }
              }
            ],
            "Path": "/",
            "RoleName": {
              "Fn::Join": [
                "-",
                [
                  "cfr-photo-lambdas",
                  "dev",
                  {
                    "Ref": "AWS::Region"
                  },
                  "lambdaRole"
                ]
              ]
            }
          }
        },
        "UploadPhotoLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-e3c07911-961a",
              "S3Key": "serverless/cfr-photo-lambdas/dev/1751455594284-2025-07-02T11:26:34.284Z/uploadPhoto.zip"
            },
            "Handler": "serverless-functions/upload-photo.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "cfr-photo-lambdas-dev-uploadPhoto",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "S3_BUCKET_NAME": "cfr-photos-dev"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "UploadPhotoLogGroup"
          ]
        },
        "ListPhotosLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-e3c07911-961a",
              "S3Key": "serverless/cfr-photo-lambdas/dev/1751455594284-2025-07-02T11:26:34.284Z/listPhotos.zip"
            },
            "Handler": "serverless-functions/list-photos.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "cfr-photo-lambdas-dev-listPhotos",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "S3_BUCKET_NAME": "cfr-photos-dev"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "ListPhotosLogGroup"
          ]
        },
        "UploadPhotoLambdaVersionHYoEsswTip0kOIHXLOFX5PqvDfdRWRorT9xta0HC0": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "UploadPhotoLambdaFunction"
            },
            "CodeSha256": "F/gW6qo0Zg0taaawD3TkGQoGEdM8U9hVXyOjQ+ZL9+U="
          }
        },
        "ListPhotosLambdaVersionP4wjdpEHzfPVsZSOEs0QotlK4qnKtldzpwOCF4Srlcg": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "ListPhotosLambdaFunction"
            },
            "CodeSha256": "F/gW6qo0Zg0taaawD3TkGQoGEdM8U9hVXyOjQ+ZL9+U="
          }
        },
        "ApiGatewayRestApi": {
          "Type": "AWS::ApiGateway::RestApi",
          "Properties": {
            "Name": "dev-cfr-photo-lambdas",
            "EndpointConfiguration": {
              "Types": [
                "EDGE"
              ]
            },
            "Policy": ""
          }
        },
        "ApiGatewayResourceUpload": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "upload",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourcePhotos": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "photos",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodUploadOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceUpload"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodPhotosOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourcePhotos"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodUploadPost": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "POST",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceUpload"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "UploadPhotoLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "UploadPhotoLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodPhotosGet": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "GET",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourcePhotos"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "ListPhotosLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "ListPhotosLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayDeployment1751455560713": {
          "Type": "AWS::ApiGateway::Deployment",
          "Properties": {
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "StageName": "dev"
          },
          "DependsOn": [
            "ApiGatewayMethodUploadOptions",
            "ApiGatewayMethodPhotosOptions",
            "ApiGatewayMethodUploadPost",
            "ApiGatewayMethodPhotosGet"
          ]
        },
        "UploadPhotoLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "UploadPhotoLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "ListPhotosLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "ListPhotosLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "PhotosBucket": {
          "Type": "AWS::S3::Bucket",
          "Properties": {
            "BucketName": "cfr-photos-dev",
            "PublicAccessBlockConfiguration": {
              "BlockPublicAcls": false,
              "BlockPublicPolicy": false,
              "IgnorePublicAcls": false,
              "RestrictPublicBuckets": false
            },
            "CorsConfiguration": {
              "CorsRules": [
                {
                  "AllowedHeaders": [
                    "*"
                  ],
                  "AllowedMethods": [
                    "GET",
                    "PUT",
                    "POST"
                  ],
                  "AllowedOrigins": [
                    "*"
                  ]
                }
              ]
            }
          }
        },
        "PhotosBucketPolicy": {
          "Type": "AWS::S3::BucketPolicy",
          "Properties": {
            "Bucket": {
              "Ref": "PhotosBucket"
            },
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": "*",
                  "Action": "s3:GetObject",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        {
                          "Fn::GetAtt": [
                            "PhotosBucket",
                            "Arn"
                          ]
                        },
                        "/*"
                      ]
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "Outputs": {
        "ServerlessDeploymentBucketName": {
          "Value": "serverless-framework-deployments-us-east-1-e3c07911-961a",
          "Export": {
            "Name": "sls-cfr-photo-lambdas-dev-ServerlessDeploymentBucketName"
          }
        },
        "UploadPhotoLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "UploadPhotoLambdaVersionHYoEsswTip0kOIHXLOFX5PqvDfdRWRorT9xta0HC0"
          },
          "Export": {
            "Name": "sls-cfr-photo-lambdas-dev-UploadPhotoLambdaFunctionQualifiedArn"
          }
        },
        "ListPhotosLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "ListPhotosLambdaVersionP4wjdpEHzfPVsZSOEs0QotlK4qnKtldzpwOCF4Srlcg"
          },
          "Export": {
            "Name": "sls-cfr-photo-lambdas-dev-ListPhotosLambdaFunctionQualifiedArn"
          }
        },
        "ServiceEndpoint": {
          "Description": "URL of the service endpoint",
          "Value": {
            "Fn::Join": [
              "",
              [
                "https://",
                {
                  "Ref": "ApiGatewayRestApi"
                },
                ".execute-api.",
                {
                  "Ref": "AWS::Region"
                },
                ".",
                {
                  "Ref": "AWS::URLSuffix"
                },
                "/dev"
              ]
            ]
          },
          "Export": {
            "Name": "sls-cfr-photo-lambdas-dev-ServiceEndpoint"
          }
        }
      }
    }
  },
  "C:\\Users\\mudge\\apps\\cfr_2025_nextjs\\serverless.yml": {
    "versionFramework": "4.17.1",
    "servicePath": "C:\\Users\\mudge\\apps\\cfr_2025_nextjs\\serverless.yml",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "component": "@sls-next/serverless-component@3.7.0",
      "name": "churchwellreunion-app",
      "inputs": {
        "domain": {
          "domainName": "churchwellreunion.com",
          "hostedZone": "churchwellreunion.com",
          "certificate": {
            "region": "us-east-1"
          }
        },
        "cloudfront": {
          "defaults": {
            "forward": {
              "headers": [
                "Authorization",
                "Host"
              ],
              "cookies": "all",
              "queryString": true
            }
          }
        },
        "name": {
          "defaultLambda": "churchwellreunion-default",
          "apiLambda": "churchwellreunion-api",
          "imageLambda": "churchwellreunion-image",
          "regenerationLambda": "churchwellreunion-revalidate"
        },
        "memory": 512,
        "timeout": 10,
        "static": {
          "cacheControl": {
            "default": "public, max-age=31536000, immutable"
          }
        }
      },
      "package": {
        "exclude": [
          "node_modules/aws-sdk/**",
          ".git/**",
          ".vscode/**",
          "test/**",
          "tests/**",
          "coverage/**",
          "README.md",
          ".env",
          ".env.*",
          "*.log",
          "src/**/*.test.js",
          "src/**/*.spec.js"
        ]
      },
      "provider": {
        "name": "aws",
        "stage": "dev"
      }
    },
    "provider": {
      "name": "aws",
      "stage": "dev"
    },
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "error": {
      "message": "\"service\" property is missing in serverless",
      "stack": "ServerlessError2: \"service\" property is missing in serverless\n    at Service.loadServiceFileParam (file:///C:/Users/mudge/.serverless/releases/4.17.1/package/dist/sf-core.js:1378:9308)\n    at Service.load (file:///C:/Users/mudge/.serverless/releases/4.17.1/package/dist/sf-core.js:1378:6841)\n    at Serverless.init (file:///C:/Users/mudge/.serverless/releases/4.17.1/package/dist/sf-core.js:1384:9813)\n    at runFramework (file:///C:/Users/mudge/.serverless/releases/4.17.1/package/dist/sf-core.js:1411:856)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async TraditionalRunner.run (file:///C:/Users/mudge/.serverless/releases/4.17.1/package/dist/sf-core.js:1407:28336)\n    at async route (file:///C:/Users/mudge/.serverless/releases/4.17.1/package/dist/sf-core.js:1582:2878)\n    at async Object.run (file:///C:/Users/mudge/.serverless/releases/4.17.1/package/dist/sf-core.js:1583:3661)\n    at async run2 (file:///C:/Users/mudge/.serverless/releases/4.17.1/package/dist/sf-core.js:1583:4815)",
      "code": "SERVICE_NAME_MISSING"
    },
    "serviceRawFile": "component: \"@sls-next/serverless-component@3.7.0\"\r\n\r\nname: churchwellreunion-app\r\n\r\ninputs:\r\n  domain:\r\n    domainName: churchwellreunion.com\r\n    hostedZone: churchwellreunion.com\r\n    certificate:\r\n      region: us-east-1  # Required for CloudFront and Lambda@Edge\r\n\r\n  cloudfront:\r\n    defaults:\r\n      forward:\r\n        headers: [Authorization, Host]\r\n        cookies: all\r\n        queryString: true\r\n\r\n  name:\r\n    defaultLambda: churchwellreunion-default\r\n    apiLambda: churchwellreunion-api\r\n    imageLambda: churchwellreunion-image\r\n    regenerationLambda: churchwellreunion-revalidate\r\n\r\n  memory: 512\r\n  timeout: 10\r\n\r\n  static:\r\n    cacheControl:\r\n      default: public, max-age=31536000, immutable\r\n\r\npackage:\r\n  exclude:\r\n    - node_modules/aws-sdk/**    # AWS SDK is available in Lambda by default\r\n    - .git/**\r\n    - .vscode/**\r\n    - test/**\r\n    - tests/**\r\n    - coverage/**\r\n    - README.md\r\n    - .env\r\n    - .env.*\r\n    - '*.log'\r\n    - src/**/*.test.js\r\n    - src/**/*.spec.js\r\n\r\n",
    "command": [
      "info"
    ],
    "options": {},
    "orgId": "2998032c-fd9e-4349-b28c-c795449e18b9",
    "orgName": "bofasprojects",
    "userId": "25Vvn7rTLw7G2sfTG2",
    "userName": "bofasprojects",
    "serviceProviderAwsAccountId": "122610511543",
    "serviceProviderAwsCfStackId": null,
    "serviceProviderAwsCfStackCreated": null,
    "serviceProviderAwsCfStackUpdated": null,
    "serviceProviderAwsCfStackStatus": null,
    "serviceProviderAwsCfStackOutputs": null
  },
  "c:\\Users\\mudge\\apps\\cfr_2025_nextjs\\serverless.yml": {
    "versionFramework": "4.17.1",
    "servicePath": "c:\\Users\\mudge\\apps\\cfr_2025_nextjs\\serverless.yml",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "component": "@sls-next/serverless-component@3.7.0",
      "name": "churchwellreunion-app",
      "inputs": {
        "domain": {
          "domainName": "churchwellreunion.com",
          "hostedZone": "churchwellreunion.com",
          "certificate": {
            "region": "us-east-1"
          }
        },
        "cloudfront": {
          "defaults": {
            "forward": {
              "headers": [
                "Authorization",
                "Host"
              ],
              "cookies": "all",
              "queryString": true
            }
          }
        },
        "name": {
          "defaultLambda": "churchwellreunion-default",
          "apiLambda": "churchwellreunion-api",
          "imageLambda": "churchwellreunion-image",
          "regenerationLambda": "churchwellreunion-revalidate"
        },
        "memory": 512,
        "timeout": 10,
        "static": {
          "cacheControl": {
            "default": "public, max-age=31536000, immutable"
          }
        }
      },
      "package": {
        "exclude": [
          "node_modules/aws-sdk/**",
          ".git/**",
          ".vscode/**",
          "test/**",
          "tests/**",
          "coverage/**",
          "README.md",
          ".env",
          ".env.*",
          "*.log",
          "src/**/*.test.js",
          "src/**/*.spec.js"
        ]
      },
      "provider": {
        "name": "aws",
        "stage": "dev"
      }
    },
    "provider": {
      "name": "aws",
      "stage": "dev"
    },
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "error": {
      "message": "\"service\" property is missing in serverless",
      "stack": "ServerlessError2: \"service\" property is missing in serverless\n    at Service.loadServiceFileParam (file:///C:/Users/mudge/.serverless/releases/4.17.1/package/dist/sf-core.js:1378:9308)\n    at Service.load (file:///C:/Users/mudge/.serverless/releases/4.17.1/package/dist/sf-core.js:1378:6841)\n    at Serverless.init (file:///C:/Users/mudge/.serverless/releases/4.17.1/package/dist/sf-core.js:1384:9813)\n    at runFramework (file:///C:/Users/mudge/.serverless/releases/4.17.1/package/dist/sf-core.js:1411:856)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async TraditionalRunner.run (file:///C:/Users/mudge/.serverless/releases/4.17.1/package/dist/sf-core.js:1407:28336)\n    at async route (file:///C:/Users/mudge/.serverless/releases/4.17.1/package/dist/sf-core.js:1582:2878)\n    at async Object.run (file:///C:/Users/mudge/.serverless/releases/4.17.1/package/dist/sf-core.js:1583:3661)\n    at async run2 (file:///C:/Users/mudge/.serverless/releases/4.17.1/package/dist/sf-core.js:1583:4815)",
      "code": "SERVICE_NAME_MISSING"
    },
    "serviceRawFile": "component: \"@sls-next/serverless-component@3.7.0\"\r\n\r\nname: churchwellreunion-app\r\n\r\ninputs:\r\n  domain:\r\n    domainName: churchwellreunion.com\r\n    hostedZone: churchwellreunion.com\r\n    certificate:\r\n      region: us-east-1  # Required for CloudFront and Lambda@Edge\r\n\r\n  cloudfront:\r\n    defaults:\r\n      forward:\r\n        headers: [Authorization, Host]\r\n        cookies: all\r\n        queryString: true\r\n\r\n  name:\r\n    defaultLambda: churchwellreunion-default\r\n    apiLambda: churchwellreunion-api\r\n    imageLambda: churchwellreunion-image\r\n    regenerationLambda: churchwellreunion-revalidate\r\n\r\n  memory: 512\r\n  timeout: 10\r\n\r\n  static:\r\n    cacheControl:\r\n      default: public, max-age=31536000, immutable\r\n\r\npackage:\r\n  exclude:\r\n    - node_modules/aws-sdk/**    # AWS SDK is available in Lambda by default\r\n    - .git/**\r\n    - .vscode/**\r\n    - test/**\r\n    - tests/**\r\n    - coverage/**\r\n    - README.md\r\n    - .env\r\n    - .env.*\r\n    - '*.log'\r\n    - src/**/*.test.js\r\n    - src/**/*.spec.js\r\n\r\n",
    "command": [
      "info"
    ],
    "options": {},
    "orgId": "2998032c-fd9e-4349-b28c-c795449e18b9",
    "orgName": "bofasprojects",
    "userId": "25Vvn7rTLw7G2sfTG2",
    "userName": "bofasprojects",
    "serviceProviderAwsAccountId": "122610511543",
    "serviceProviderAwsCfStackId": null,
    "serviceProviderAwsCfStackCreated": null,
    "serviceProviderAwsCfStackUpdated": null,
    "serviceProviderAwsCfStackStatus": null,
    "serviceProviderAwsCfStackOutputs": null
  }
}