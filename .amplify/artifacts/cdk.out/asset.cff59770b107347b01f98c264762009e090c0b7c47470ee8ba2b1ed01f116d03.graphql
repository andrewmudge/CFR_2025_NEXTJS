type ApprovedUser @aws_iam @aws_cognito_user_pools {
  id: ID!
  email: String!
  givenName: String!
  familyName: String!
  phoneNumber: String
  isActive: Boolean!
  approvedBy: String
  approvedDate: AWSDateTime
  createdDate: AWSDateTime!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

input AmplifyAIConversationTurnErrorInput {
  errorType: String!
  message: String!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelApprovedUserConnection @aws_iam @aws_cognito_user_pools {
  items: [ApprovedUser]!
  nextToken: String
}

input ModelApprovedUserFilterInput {
  id: ModelIDInput
  email: ModelStringInput
  givenName: ModelStringInput
  familyName: ModelStringInput
  phoneNumber: ModelStringInput
  isActive: ModelBooleanInput
  approvedBy: ModelStringInput
  approvedDate: ModelStringInput
  createdDate: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelApprovedUserFilterInput]
  or: [ModelApprovedUserFilterInput]
  not: ModelApprovedUserFilterInput
}

type Query {
  getApprovedUser(id: ID!): ApprovedUser @aws_iam @aws_cognito_user_pools
  listApprovedUsers(filter: ModelApprovedUserFilterInput, limit: Int, nextToken: String): ModelApprovedUserConnection @aws_iam @aws_cognito_user_pools
  approvedUsersByEmail(email: String!, sortDirection: ModelSortDirection, filter: ModelApprovedUserFilterInput, limit: Int, nextToken: String): ModelApprovedUserConnection @aws_iam @aws_cognito_user_pools
}

input ModelApprovedUserConditionInput {
  email: ModelStringInput
  givenName: ModelStringInput
  familyName: ModelStringInput
  phoneNumber: ModelStringInput
  isActive: ModelBooleanInput
  approvedBy: ModelStringInput
  approvedDate: ModelStringInput
  createdDate: ModelStringInput
  and: [ModelApprovedUserConditionInput]
  or: [ModelApprovedUserConditionInput]
  not: ModelApprovedUserConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreateApprovedUserInput {
  id: ID
  email: String!
  givenName: String!
  familyName: String!
  phoneNumber: String
  isActive: Boolean!
  approvedBy: String
  approvedDate: AWSDateTime
  createdDate: AWSDateTime!
}

input UpdateApprovedUserInput {
  id: ID!
  email: String
  givenName: String
  familyName: String
  phoneNumber: String
  isActive: Boolean
  approvedBy: String
  approvedDate: AWSDateTime
  createdDate: AWSDateTime
}

input DeleteApprovedUserInput {
  id: ID!
}

type Mutation {
  createApprovedUser(input: CreateApprovedUserInput!, condition: ModelApprovedUserConditionInput): ApprovedUser @aws_iam @aws_cognito_user_pools
  updateApprovedUser(input: UpdateApprovedUserInput!, condition: ModelApprovedUserConditionInput): ApprovedUser @aws_iam @aws_cognito_user_pools
  deleteApprovedUser(input: DeleteApprovedUserInput!, condition: ModelApprovedUserConditionInput): ApprovedUser @aws_iam @aws_cognito_user_pools
}

input ModelSubscriptionApprovedUserFilterInput {
  id: ModelSubscriptionIDInput
  email: ModelSubscriptionStringInput
  givenName: ModelSubscriptionStringInput
  familyName: ModelSubscriptionStringInput
  phoneNumber: ModelSubscriptionStringInput
  isActive: ModelSubscriptionBooleanInput
  approvedBy: ModelSubscriptionStringInput
  approvedDate: ModelSubscriptionStringInput
  createdDate: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionApprovedUserFilterInput]
  or: [ModelSubscriptionApprovedUserFilterInput]
}

type Subscription {
  onCreateApprovedUser(filter: ModelSubscriptionApprovedUserFilterInput): ApprovedUser @aws_subscribe(mutations: ["createApprovedUser"]) @aws_iam @aws_cognito_user_pools
  onUpdateApprovedUser(filter: ModelSubscriptionApprovedUserFilterInput): ApprovedUser @aws_subscribe(mutations: ["updateApprovedUser"]) @aws_iam @aws_cognito_user_pools
  onDeleteApprovedUser(filter: ModelSubscriptionApprovedUserFilterInput): ApprovedUser @aws_subscribe(mutations: ["deleteApprovedUser"]) @aws_iam @aws_cognito_user_pools
}
